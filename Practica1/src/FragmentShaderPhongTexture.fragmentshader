#version 330 core

#define NUM_MAX_PLIGHTS 4
#define NUM_MAX_SLIGHTS 4

struct Material {

};  

struct PLight {
  
};

struct DLight {

};

struct SLight {
  
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
out vec4 color;
  
uniform vec3 viewPos;
uniform Material material;
uniform DLight dlight;
uniform PLight plight[NUM_MAX_PLIGHTS];
uniform SLight slight[NUM_MAX_SLIGHTS];

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 lightDirection);
vec3 PointLight(PLight light, vec3 Normal, vec3 lightDirection);
vec3 SpotLight(SLight light, vec3 Normal, vec3 lightDirection);

void main()
{
  //SUMA DE TODAS LAS LUZES:
  vec3 output;
  output += DirectionalLight();
  for(int i = 0; i < NUM_MAX_PLIGHTS; i++)
  	output += PointLight();
  output += SpotLight();
  
  color = vec4(output, 1.0);
}  

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 lightDirection){
    // Componente iluminacion difusa:
    float diff = max(dot(Normal, lightDirection), 0.0);
    // Componente iluminacion especular:
    vec3 reflectDir = reflect(-lightDirection, Normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Combinacion de resultados
    vec3 ambient  = light.ambient  * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    return (ambient + diffuse + specular);
}

vec3 PointLight(PLight light, vec3 Normal, vec3 viewDirection){
	
}

vec3 SpotLight(SLight light, vec3 Normal, vec3 viewDirection){
	
}